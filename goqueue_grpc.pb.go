// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: goqueue.proto

package godq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoDqClient is the client API for GoDq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoDqClient interface {
	ConsumeBatch(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (GoDq_ConsumeBatchClient, error)
	WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*Log, error)
}

type goDqClient struct {
	cc grpc.ClientConnInterface
}

func NewGoDqClient(cc grpc.ClientConnInterface) GoDqClient {
	return &goDqClient{cc}
}

func (c *goDqClient) ConsumeBatch(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (GoDq_ConsumeBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoDq_ServiceDesc.Streams[0], "/godq.GoDq/ConsumeBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &goDqConsumeBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoDq_ConsumeBatchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type goDqConsumeBatchClient struct {
	grpc.ClientStream
}

func (x *goDqConsumeBatchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goDqClient) WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := c.cc.Invoke(ctx, "/godq.GoDq/WriteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoDqServer is the server API for GoDq service.
// All implementations must embed UnimplementedGoDqServer
// for forward compatibility
type GoDqServer interface {
	ConsumeBatch(*ConsumeRequest, GoDq_ConsumeBatchServer) error
	WriteBatch(context.Context, *WriteBatchRequest) (*Log, error)
	mustEmbedUnimplementedGoDqServer()
}

// UnimplementedGoDqServer must be embedded to have forward compatible implementations.
type UnimplementedGoDqServer struct {
}

func (UnimplementedGoDqServer) ConsumeBatch(*ConsumeRequest, GoDq_ConsumeBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeBatch not implemented")
}
func (UnimplementedGoDqServer) WriteBatch(context.Context, *WriteBatchRequest) (*Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBatch not implemented")
}
func (UnimplementedGoDqServer) mustEmbedUnimplementedGoDqServer() {}

// UnsafeGoDqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoDqServer will
// result in compilation errors.
type UnsafeGoDqServer interface {
	mustEmbedUnimplementedGoDqServer()
}

func RegisterGoDqServer(s grpc.ServiceRegistrar, srv GoDqServer) {
	s.RegisterService(&GoDq_ServiceDesc, srv)
}

func _GoDq_ConsumeBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoDqServer).ConsumeBatch(m, &goDqConsumeBatchServer{stream})
}

type GoDq_ConsumeBatchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type goDqConsumeBatchServer struct {
	grpc.ServerStream
}

func (x *goDqConsumeBatchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _GoDq_WriteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDqServer).WriteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godq.GoDq/WriteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDqServer).WriteBatch(ctx, req.(*WriteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoDq_ServiceDesc is the grpc.ServiceDesc for GoDq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoDq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "godq.GoDq",
	HandlerType: (*GoDqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBatch",
			Handler:    _GoDq_WriteBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeBatch",
			Handler:       _GoDq_ConsumeBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goqueue.proto",
}
